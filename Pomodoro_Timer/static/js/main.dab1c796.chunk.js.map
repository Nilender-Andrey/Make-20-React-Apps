{"version":3,"sources":["components/Timer/Timer.tsx","helper/padTime.ts","components/Timer/SetTimer.tsx","components/Timer/TimeContainer.tsx","App.tsx","index.tsx"],"names":["Timer","data","direction","maxW","w","minH","p","borderRadius","justify","alignItems","as","fontSize","color","textAlign","h","title","className","minutes","fontWeight","seconds","spacing","isRunning","bg","onClick","stopTimer","startTimer","resetTimet","padTime","time","toString","padStart","SetTimer","type","onChange","handleSetMin","value","min","max","handleSetSec","sec","setValue","TimeContainer","useState","setMin","setSec","setTitle","timeLeft","setTimeLeft","setIsRunning","intervalRef","useRef","defaultTime","Math","floor","current","clearInterval","dataForTimer","setInterval","tL","dataForSetTimer","e","num","target","App","ReactDOM","render","document","getElementById"],"mappings":"qPAiBe,SAASA,EAAT,GAAyC,IAAxBC,EAAuB,EAAvBA,KAC9B,OACE,eAAC,IAAD,CAAMC,UAAU,SAASC,KAAK,QAAQC,EAAE,OAAOC,KAAK,QAAQC,EAAE,OAAOC,aAAa,OAAOC,QAAQ,eAAeC,WAAW,SAA3H,UACE,cAAC,IAAD,CAASC,GAAG,KAAKC,SAAS,OAAOC,MAAM,WAAWC,UAAU,SAASC,EAAE,OAAvE,SAA+Eb,EAAKc,QAEpF,eAAC,IAAD,CAAQC,UAAU,QAAlB,UACE,cAAC,IAAD,CAAMN,GAAG,OAAOC,SAAS,OAAOC,MAAM,YAAtC,SAAmDX,EAAKgB,UAExD,cAAC,IAAD,CAAMP,GAAG,OAAOC,SAAS,MAAMO,WAAW,OAAON,MAAM,YAAvD,eAEA,cAAC,IAAD,CAAMF,GAAG,OAAOC,SAAS,OAAOC,MAAM,YAAtC,SAAmDX,EAAKkB,aAG1D,eAAC,IAAD,CAAQH,UAAU,UAAUI,QAAQ,OAAOZ,QAAQ,SAAnD,UACGP,EAAKoB,UACF,cAAC,IAAD,CAAQjB,EAAE,QAAQO,SAAS,OAAOW,GAAG,aAAaC,QAAStB,EAAKuB,UAAhE,kBACA,cAAC,IAAD,CAAQpB,EAAE,QAAQO,SAAS,OAAOW,GAAG,aAAaC,QAAStB,EAAKwB,WAAhE,mBAEJ,cAAC,IAAD,CAAQd,SAAS,OAAOW,GAAG,aAAaC,QAAStB,EAAKyB,WAAtD,yBCnCO,SAASC,EAAQC,GAC9B,OAAOA,EAAKC,WAAWC,SAAS,EAAG,K,YCgBtB,SAASC,EAAT,GAAgD,IAA5B9B,EAA2B,EAA3BA,KACjC,OACE,eAAC,IAAD,CACEC,UAAU,SACVC,KAAK,QACLC,EAAE,OACFC,KAAK,QACLC,EAAE,OACFC,aAAa,OACbC,QAAQ,eACRC,WAAW,SARb,UAUE,cAAC,IAAD,CACEC,GAAG,KACHC,SAAS,OACTC,MAAM,WACNC,UAAU,SACVC,EAAE,OALJ,SAOGb,EAAKoB,UAAY,mBAAqB,eAEzC,eAAC,IAAD,CAAMZ,WAAW,SAASK,EAAE,OAA5B,UACE,cAAC,IAAD,CACEkB,KAAK,SACLC,SAAUhC,EAAKiC,aACfC,MAAOR,EAAQ1B,EAAKmC,KACpBC,IAAI,KACJD,IAAI,IACJzB,SAAS,OACTG,EAAE,OACFV,EAAE,QACFE,EAAE,OACFO,UAAU,WAGZ,cAAC,IAAD,CAAQT,EAAE,OAAOU,EAAE,OAAOH,SAAS,MAAMO,WAAW,OAAON,MAAM,YAAjE,eAEA,cAAC,IAAD,CACEoB,KAAK,SACLC,SAAUhC,EAAKqC,aACfH,MAAOR,EAAQ1B,EAAKsC,KACpBF,IAAI,KACJD,IAAI,IACJzB,SAAS,OACTG,EAAE,OACFV,EAAE,QACFE,EAAE,OACFO,UAAU,cAGd,cAAC,IAAD,CAAQF,SAAS,OAAOW,GAAG,aAAaC,QAAStB,EAAKuC,SAAtD,0BC9DS,SAASC,IACtB,MAAsBC,mBAAS,GAA/B,mBAAON,EAAP,KAAYO,EAAZ,KACA,EAAsBD,mBAAS,IAA/B,mBAAOH,EAAP,KAAYK,EAAZ,KAEA,EAA0BF,mBAAS,8BAAnC,mBAAO3B,EAAP,KAAc8B,EAAd,KACA,EAAgCH,mBAAS,IAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOrB,EAAP,KAAkB2B,EAAlB,KACMC,EAAcC,iBAA8B,MAC5CC,EAAcD,iBAAO,GAErBjC,EAAUU,EAAQyB,KAAKC,MAAMP,EAAW,KACxC3B,EAAUQ,EAAQmB,EAAsB,IAAV7B,GAE9BS,EAAa,WACbuB,EAAYK,SACdC,cAAcN,EAAYK,SAG5BT,EAAS,8BACTI,EAAYK,QAAU,KACtBP,EAAYI,EAAYG,SACxBN,GAAa,IAsDf,IAAMQ,EAAe,CACnBzC,QACAM,YACAJ,UACAE,UACAO,aACAD,WAzDiB,WACU,MAAvBwB,EAAYK,UAEhBN,GAAa,GACbH,EAAS,uBACTI,EAAYK,QAAUG,aAAY,WAChCV,GAAY,SAACW,GACX,OAAIA,EAAK,EAAWA,EAAK,GAErBT,EAAYK,SACdC,cAAcN,EAAYK,SAE5B5B,IACO,QAER,OA2CHF,UAxCgB,WACY,OAAxByB,EAAYK,UAEZL,EAAYK,SACdC,cAAcN,EAAYK,SAE5BN,GAAa,GACbH,EAAS,eACTI,EAAYK,QAAU,QAmClBK,EAAkB,CACtBvB,MACAG,MACAlB,YACAmB,SApCF,WACMnB,IACJ8B,EAAYG,QAAgB,GAANlB,EAAWG,EACjCQ,EAAYI,EAAYG,WAkCxBpB,aA/BF,SAAsB0B,GACpB,IAAIC,GAAOD,EAAEE,OAAO3B,MAChB0B,EAAM,IAAEA,EAAM,GACdA,EAAM,KAAIA,EAAM,IAEpBlB,EAAOkB,IA2BPvB,aAxBF,SAAsBsB,GACpB,IAAIC,GAAOD,EAAEE,OAAO3B,MAChB0B,EAAM,IAAEA,EAAM,GACdA,EAAM,KAAIA,EAAM,IAEpBjB,EAAOiB,KAsBT,OACE,gCACE,cAAC9B,EAAD,CAAU9B,KAAM0D,IAChB,cAAC3D,EAAD,CAAOC,KAAMuD,O,MCjGJ,SAASO,IACtB,OACE,cAAC,IAAD,CAAQjD,EAAE,QAAQQ,GAAG,YAArB,SACE,cAACmB,EAAD,MCFNuB,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dab1c796.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Heading, Button, HStack, Flex, Text,\n} from '@chakra-ui/react';\n\ntype TimerPropsType ={\n  data:{ title: string;\n    isRunning: boolean;\n    minutes: string;\n    seconds: string;\n    resetTimet: () => void;\n    startTimer: () => void;\n    stopTimer: () => void;\n  }\n\n}\n\nexport default function Timer({ data }:TimerPropsType) {\n  return (\n    <Flex direction=\"column\" maxW=\"400px\" w=\"100%\" minH=\"300px\" p=\"20px\" borderRadius=\"25px\" justify=\"space-around\" alignItems=\"center\">\n      <Heading as=\"h1\" fontSize=\"24px\" color=\"green.50\" textAlign=\"center\" h=\"50px\">{data.title}</Heading>\n\n      <HStack className=\"timer\">\n        <Text as=\"span\" fontSize=\"80px\" color=\"green.900\">{data.minutes}</Text>\n\n        <Text as=\"span\" fontSize=\"8xl\" fontWeight=\"bold\" color=\"green.900\">:</Text>\n\n        <Text as=\"span\" fontSize=\"80px\" color=\"green.900\">{data.seconds}</Text>\n      </HStack>\n\n      <HStack className=\"buttons\" spacing=\"30px\" justify=\"center\">\n        {data.isRunning\n          ? <Button w=\"100px\" fontSize=\"45px\" bg=\"yellow.300\" onClick={data.stopTimer}>Stop</Button>\n          : <Button w=\"100px\" fontSize=\"45px\" bg=\"yellow.300\" onClick={data.startTimer}>Start</Button>}\n\n        <Button fontSize=\"45px\" bg=\"yellow.300\" onClick={data.resetTimet}>Reset</Button>\n      </HStack>\n    </Flex>\n  );\n}\n","export default function padTime(time: number) {\n  return time.toString().padStart(2, '0');\n}\n","import React from 'react';\nimport {\n  Heading, Button, Input, Flex, Center,\n} from '@chakra-ui/react';\nimport padTime from '../../helper/padTime';\n\ntype SetTimerPropsType = {\n  data: {\n    min: number;\n    sec: number;\n    isRunning: boolean;\n    setValue: () => void;\n    handleSetMin: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    handleSetSec: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  };\n};\n\nexport default function SetTimer({ data }: SetTimerPropsType) {\n  return (\n    <Flex\n      direction=\"column\"\n      maxW=\"400px\"\n      w=\"100%\"\n      minH=\"300px\"\n      p=\"20px\"\n      borderRadius=\"25px\"\n      justify=\"space-around\"\n      alignItems=\"center\"\n    >\n      <Heading\n        as=\"h1\"\n        fontSize=\"24px\"\n        color=\"green.50\"\n        textAlign=\"center\"\n        h=\"50px\"\n      >\n        {data.isRunning ? 'Stop timer first' : 'Set values'}\n      </Heading>\n      <Flex alignItems=\"center\" h=\"90px\">\n        <Input\n          type=\"number\"\n          onChange={data.handleSetMin}\n          value={padTime(data.min)}\n          max=\"99\"\n          min=\"0\"\n          fontSize=\"80px\"\n          h=\"90px\"\n          w=\"110px\"\n          p=\"10px\"\n          textAlign=\"center\"\n        />\n\n        <Center w=\"30px\" h=\"90px\" fontSize=\"8xl\" fontWeight=\"bold\" color=\"green.900\">:</Center>\n\n        <Input\n          type=\"number\"\n          onChange={data.handleSetSec}\n          value={padTime(data.sec)}\n          max=\"99\"\n          min=\"0\"\n          fontSize=\"80px\"\n          h=\"90px\"\n          w=\"110px\"\n          p=\"10px\"\n          textAlign=\"center\"\n        />\n      </Flex>\n      <Button fontSize=\"45px\" bg=\"yellow.300\" onClick={data.setValue}>\n        Set value\n      </Button>\n    </Flex>\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport Timer from './Timer';\nimport padTime from '../../helper/padTime';\nimport SetTimer from './SetTimer';\n\nexport default function TimeContainer() {\n  const [min, setMin] = useState(0);\n  const [sec, setSec] = useState(10);\n\n  const [title, setTitle] = useState('Let the countdown begin!!!');\n  const [timeLeft, setTimeLeft] = useState(10);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null); // : NodeJS.Timeout | null = null;\n  const defaultTime = useRef(0);\n\n  const minutes = padTime(Math.floor(timeLeft / 60));\n  const seconds = padTime(timeLeft - +minutes * 60);\n\n  const resetTimet = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    setTitle('Ready to go anothew round?');\n    intervalRef.current = null;\n    setTimeLeft(defaultTime.current);\n    setIsRunning(false);\n  };\n\n  const startTimer = () => {\n    if (intervalRef.current != null) return;\n\n    setIsRunning(true);\n    setTitle(\"You're doing great!\");\n    intervalRef.current = setInterval(() => {\n      setTimeLeft((tL) => {\n        if (tL > +1) return tL - 1;\n\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n        }\n        resetTimet();\n        return 0;\n      });\n    }, 1000);\n  };\n\n  const stopTimer = () => {\n    if (intervalRef.current === null) return;\n\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    setIsRunning(false);\n    setTitle('Keep it up!');\n    intervalRef.current = null;\n  };\n\n  function setValue() {\n    if (isRunning) return;\n    defaultTime.current = min * 60 + sec;\n    setTimeLeft(defaultTime.current);\n  }\n\n  function handleSetMin(e:React.ChangeEvent<HTMLInputElement>) {\n    let num = +e.target.value;\n    if (num < 0)num = 0;\n    if (num > 99) num = 99;\n\n    setMin(num);\n  }\n\n  function handleSetSec(e:React.ChangeEvent<HTMLInputElement>) {\n    let num = +e.target.value;\n    if (num < 0)num = 0;\n    if (num > 99) num = 99;\n\n    setSec(num);\n  }\n\n  const dataForTimer = {\n    title,\n    isRunning,\n    minutes,\n    seconds,\n    resetTimet,\n    startTimer,\n    stopTimer,\n  };\n\n  const dataForSetTimer = {\n    min,\n    sec,\n    isRunning,\n    setValue,\n    handleSetMin,\n    handleSetSec,\n  };\n\n  return (\n    <div>\n      <SetTimer data={dataForSetTimer} />\n      <Timer data={dataForTimer} />\n    </div>\n  );\n}\n","import React from 'react';\nimport { Center } from '@chakra-ui/react';\nimport TimeContainer from './components/Timer/TimeContainer';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Center h=\"100vh\" bg=\"green.400\">\n      <TimeContainer />\n    </Center>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { ChakraProvider } from '@chakra-ui/react';\nimport App from './App';\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}